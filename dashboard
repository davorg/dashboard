#!/usr/bin/perl

use strict;
use warnings;
use 5.010;

use JSON;
use Path::Tiny;
use Template;
use MetaCPAN::Client;
use URI;
use FindBin '$RealBin';
use Pithub;

my $global_cfg = decode_json(path('dashboard.json')->slurp);

my $tt = Template->new({
  ENCODING     => 'utf8',
  INCLUDE_PATH => $global_cfg->{input_dir},
  OUTPUT_PATH  => $global_cfg->{output_dir},
  WRAPPER      => $global_cfg->{wrapper},
  VARIABLES    => {
    linked_badge => {
      cpan       => \&cpan_badge_link,
      gh         => \&gh_badge_link,
      travis     => \&travis_badge_link,
      travis_com => \&travis_com_badge_link,
      cirrus     => \&cirrus_badge_link,
      appveyor   => \&appveyor_badge_link,
      coveralls  => \&coveralls_badge_link,
      codecov    => \&codecov_badge_link,
      kritika    => \&kritika_badge_link,
    },
  },
});

my @authors;
my @urls;

for (glob "$RealBin/authors/*.json") {
  push @authors, do_author($tt, $_, $global_cfg);
  push @urls, "https://$global_cfg->{domain}/$authors[-1]{cpan}/";
}

$tt->process(
  $global_cfg->{index_template},
  { authors => \@authors },
  'index.html',
  { binmode => ':utf8' },
);
push @urls, "https://$global_cfg->{domain}/";

for (@{ $global_cfg->{page_templates} }) {
  $tt->process(
    "$_.tt",
    { name => ucfirst $_ },
    "$_/index.html",
    { binmode => ':utf8' },
  );
  push @urls, "https://$global_cfg->{domain}/$_/";
}

@urls = sort @urls;

$tt->process(
  'sitemap.tt',
  { urls => \@urls},
  'sitemap.xml',
  { binmode => ':utf8' },
);

sub do_author {
  my ($tt, $file, $global_cfg) = @_;

  my $cfg = decode_json(path($file)->slurp);

  my $ph = Pithub->new;

  $cfg->{modules} = [];

  my $mcpan    = MetaCPAN::Client->new;
  my $author   = $mcpan->author($cfg->{author}{cpan});
  my $releases = $author->releases;

  $cfg->{author}{gravatar} = $author->gravatar_url;
  $cfg->{author}{name} = $author->name;

  while ( my $rel = $releases->next ) {
    my $mod;
    $mod->{name} = $rel->name;
    $mod->{dist} = $rel->distribution;
    $mod->{date} = (split /T/, $rel->date)[0];
    # Get the repo link.
    # 1. It should be in the "web" key
    # 2. Otherwise, check the "url" key
    $mod->{repo} = $rel->resources->{repository}{web}
      // $rel->resources->{repository}{url};

    if ($rel->resources->{bugtracker}{web}) {
      $mod->{bugtracker} = $rel->resources->{bugtracker}{web};
      $mod->{uses_rt} = $mod->{bugtracker} =~ /rt.cpan.org/;
    }

    unless ($mod->{repo}) {
      warn "No repo for $mod->{name}\n";
      next;
    }

    unless (valid_repo($mod->{repo})) {
      warn "Skipping $mod->{repo}\n";
      next;
    }

    $mod->{repo} =~ s[/$][];
    # We need the repo's name. Try to extract it from the URL
    my $repo_uri = URI->new($mod->{repo});
    if ($mod->{repo} =~ /^(http|git)/) {
      my $path = $repo_uri->path;
      @$mod{qw[repo_owner repo_name]} = (split m|/|, $path, 3)[1, 2];
      $mod->{repo_name} =~ s/\.git$// if $mod->{repo} =~ /^git/;
    } else {
      warn "Strange repo for $mod->{name} ($mod->{repo}). Skipping.\n";
      next;
    }
    $mod->{insecure_repo} = $mod->{repo} =~ m|^http:|;

    my $ph_resp = $ph->repos->get(
      user => $mod->{repo_owner},
      repo => $mod->{repo_name},
    );

use Data::Dumper;
warn "$mod->{repo_owner}/$mod->{repo_name} ->\n", Dumper($ph_resp->content), "\n";

    $mod->{default_branch} = $ph_resp->content->{default_branch};

    push @{ $cfg->{modules} }, $mod;
  }

  $cfg->{modules} = [ sort { $a->{name} cmp $b->{name} } @{$cfg->{modules}} ];

  $cfg->{sort} //= {};
  $cfg->{sort}{column} //= 0;
  $cfg->{sort}{column} = 2 if 'date' eq lc $cfg->{sort}{column};
  $cfg->{sort}{direction} //= 'asc';

  $cfg = {
    %$cfg,
    %$global_cfg,
   };

  $tt->process(
    $cfg->{author_template},
    $cfg,
    "$cfg->{author}{cpan}/index.html",
    { binmode => ':utf8' },
  ) or die $tt->error;

  return $cfg->{author};
}

sub valid_repo {
  my ($repo_uri) = @_;

  return unless defined $repo_uri;

  # Currently we only support Github repos
  return $repo_uri =~ m|github\.com/|;
}

sub cpan_badge_link {
  my ($module) = @_;

  return badge_link(
    "https://metacpan.org/release/$module->{dist}",
    "https://img.shields.io/cpan/v/$module->{dist}.svg",
    "CPAN version for $module->{dist}",
  );
}

sub cirrus_badge_link {
  my ($task, $module) = @_;

  return badge_link(
    "https://cirrus-ci.com/github/$module->{repo_owner}/$module->{repo_name}",
    "https://api.cirrus-ci.com/github/$module->{repo_owner}/$module->{repo_name}.svg?task=$task",
    "Cirrus task $task",
  );
}

sub gh_badge_link {
  my ($workflow, $module) = @_;

  return badge_link(
    "https://github.com/$module->{repo_owner}/$module->{repo_name}/actions?query=workflow%3A$workflow",
    "https://github.com/$module->{repo_owner}/$module->{repo_name}/workflows/$workflow/badge.svg",
    "GH Action $workflow",
  );
}

sub appveyor_badge_link {
  my ($module) = @_;

  return badge_link(
    "https://ci.appveyor.com/project/$module->{repo_owner}/$module->{repo_name}",
    "https://ci.appveyor.com/api/projects/status/github/$module->{repo_owner}/$module->{repo_name}?svg=true&passingText=Windows%20-%20OK&pendingText=Windows%20-%20%3F%3F%3F&failingText=Windows%20-%20broken",
    "Build status for $module->{dist}",
  );
}

sub travis_badge_link {
  my ($module) = @_;

  return badge_link(
    "https://travis-ci.org/$module->{repo_owner}/$module->{repo_name}?branch=$module->{default_branch}",
    "https://travis-ci.org/$module->{repo_owner}/$module->{repo_name}.svg?branch=$module->{default_branch}",
    "Build status for $module->{dist}",
  );
}

sub travis_com_badge_link {
    my ($module) = @_;

    return travis_badge_link($module) =~ s/travis-ci\.org/travis-ci.com/gr;
}

sub coveralls_badge_link {
  my ($module, $author) = @_;

  return badge_link(
    "https://coveralls.io/github/$author->{github}/$module->{repo_name}?branch=$module->{default_branch}",
    "https://coveralls.io/repos/$author->{github}/$module->{repo_name}/badge.svg?branch=$module->{default_branch}&service=github",
    "Test coverage for $module->{dist}",
  );
}

sub codecov_badge_link {
  my ($module) = @_;

  return badge_link(
    "https://codecov.io/gh/$module->{repo_owner}/$module->{repo_name}",
    "https://codecov.io/gh/$module->{repo_owner}/$module->{repo_name}/branch/$module->{default_branch}/graph/badge.svg",
    "Test coverage for $module->{dist}",
  );
}

sub kritika_badge_link {
  my ($module, $author) = @_;

  return badge_link(
    "https://kritika.io/users/$author->{github}/repos/$module->{repo_owner}+$module->{repo_name}/",
    "https://kritika.io/users/$author->{github}/repos/$module->{repo_owner}+$module->{repo_name}/heads/$module->{default_branch}/status.svg",
    "Kritika grade for $module->{dist}",
  );
}

sub badge_link {
  my ($link_url, $img_url, $alt_text) = @_;

  return qq[<a href="$link_url"><img class="backup_picture" alt="$alt_text" src="$img_url"></a>];
}
